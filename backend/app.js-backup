const express = require('express');
const app = express();
const bodyParser = require('body-parser');

// Adding CORS Middleware
// Allow requests from localhost:3000
const cors = require('cors');

// Adding CORS Middleware
// Allow requests from localhost:3000
app.use(cors({
  origin: 'http://localhost:3000',
  methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
  credentials: true,
  optionsSuccessStatus: 200,
  allowedHeaders: ['Content-Type', 'Authorization'],
}));

// Adding CORS Headers for all Routes
app.use((req, res, next) => {
  res.header('Access-Control-Allow-Origin', 'http://localhost:3000');
  res.header('Access-Control-Allow-Credentials', 'true');
  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, PATCH, DELETE, OPTIONS');
  if (req.method === 'OPTIONS') {
    return res.status(200).json({});
  }
  next();
});


app.use(bodyParser.json());

const tournaments = []; // Simple in-memory storage for demonstration

app.post('/api/tournament', (req, res) => {
  const { numTeams, numPoules, numCourts, matchTime, startTime, tournamentDuration } = req.body;
  if (!numTeams || !numPoules || !numCourts || !matchTime || !startTime || !tournamentDuration) {
    return res.status(400).send('Invalid input');
  }
  const newTournament = {
    id: tournaments.length + 1,
    numTeams,
    numPoules,
    numCourts,
    matchTime,
    startTime,
    tournamentDuration,
    matches: [],
  };
  tournaments.push(newTournament);
  res.status(201).send(newTournament);
});

app.get('/api/tournament/:id/schedule', (req, res) => {
  const tournamentId = parseInt(req.params.id, 10);
  const tournament = tournaments.find((t) => t.id === tournamentId);
  if (!tournament) {
    return res.status(404).send('Tournament not found');
  }
  res.send(tournament.matches);
});

app.listen(5001, () => {
  console.log('Backend running on port 5001');
});

