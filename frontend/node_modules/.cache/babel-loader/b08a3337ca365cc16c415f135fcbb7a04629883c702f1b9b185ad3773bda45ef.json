{"ast":null,"code":"var _jsxFileName = \"/app/src/App.js\",\n  _s = $RefreshSig$();\n// frontend/src/App.js\n\nimport React, { useState } from 'react';\nimport ConfigurationForm from './components/ConfigurationForm';\nimport PouleSchedule from './components/PouleSchedule';\nimport MatchResults from './components/MatchResults';\nimport LiveStandings from './components/LiveStandings';\nimport KnockoutRounds from './components/KnockoutRounds';\nimport './styles/index.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [config, setConfig] = useState(null);\n  const [schedule, setSchedule] = useState([]);\n  const [results, setResults] = useState({});\n  const [standings, setStandings] = useState({});\n  const [knockoutStage, setKnockoutStage] = useState(false);\n  const [knockoutTeams, setKnockoutTeams] = useState([]);\n  const handleConfigSubmit = newConfig => {\n    setConfig(newConfig);\n    setKnockoutStage(false);\n    setSchedule([]);\n    setResults([]);\n    setStandings({});\n  };\n  const generatePouleSchedule = () => {\n    const {\n      teamNames,\n      numPoules,\n      numCourts,\n      matchTime,\n      startTime\n    } = config;\n    const poules = Array.from({\n      length: numPoules\n    }, () => []);\n    teamNames.forEach((team, index) => {\n      const pouleIndex = index % numPoules;\n      poules[pouleIndex].push(team);\n    });\n    const addMinutes = (time, minutes) => {\n      const [hour, min] = time.split(':').map(Number);\n      const newMinutes = hour * 60 + min + minutes;\n      const newHour = Math.floor(newMinutes / 60) % 24;\n      const newMin = newMinutes % 60;\n      return `${String(newHour).padStart(2, '0')}:${String(newMin).padStart(2, '0')}`;\n    };\n    let currentTime = startTime;\n    const generatedSchedule = [];\n    poules.forEach((poule, pouleIndex) => {\n      for (let i = 0; i < poule.length - 1; i++) {\n        for (let j = i + 1; j < poule.length; j++) {\n          const nonPlayingTeams = teamNames.filter(team => team !== poule[i] && team !== poule[j]);\n          const referee = nonPlayingTeams[generatedSchedule.length % nonPlayingTeams.length];\n          generatedSchedule.push({\n            time: currentTime,\n            teams: `${poule[i]} vs ${poule[j]}`,\n            poule: pouleIndex + 1,\n            court: generatedSchedule.length % numCourts + 1,\n            referee,\n            score1: 0,\n            score2: 0\n          });\n          currentTime = addMinutes(currentTime, matchTime);\n        }\n      }\n    });\n    setSchedule(generatedSchedule);\n  };\n  const updateStandings = newResults => {\n    const updatedStandings = {\n      ...standings\n    };\n    newResults.forEach(match => {\n      const {\n        teams,\n        score1,\n        score2,\n        poule\n      } = match;\n\n      // Initialize poule if it doesn't exist in updatedStandings\n      if (!updatedStandings[poule]) {\n        updatedStandings[poule] = {};\n      }\n\n      // Split team names and parse scores\n      const [team1, team2] = teams.split(' vs ').map(t => t.trim());\n      const team1Score = parseInt(score1, 10);\n      const team2Score = parseInt(score2, 10);\n\n      // Initialize teams in standings if they don't already exist\n      [team1, team2].forEach(team => {\n        if (!updatedStandings[poule][team]) {\n          updatedStandings[poule][team] = {\n            name: team,\n            played: 0,\n            won: 0,\n            points: 0,\n            scored: 0,\n            against: 0\n          };\n        }\n      });\n\n      // Retrieve stats for each team\n      const team1Stats = updatedStandings[poule][team1];\n      const team2Stats = updatedStandings[poule][team2];\n\n      // Update games played\n      team1Stats.played++;\n      team2Stats.played++;\n\n      // Update scores\n      team1Stats.scored += team1Score;\n      team1Stats.against += team2Score;\n      team2Stats.scored += team2Score;\n      team2Stats.against += team1Score;\n\n      // Determine and update points based on match outcome\n      if (team1Score > team2Score) {\n        team1Stats.won++;\n        team1Stats.points += 3;\n      } else if (team2Score > team1Score) {\n        team2Stats.won++;\n        team2Stats.points += 3;\n      } else {\n        // In case of a draw, each team gets 1 point\n        team1Stats.points += 1;\n        team2Stats.points += 1;\n      }\n    });\n\n    // Sort teams within each poule based on points, goal difference, and goals scored\n    Object.keys(updatedStandings).forEach(poule => {\n      const teams = Object.values(updatedStandings[poule]);\n      teams.sort((a, b) => {\n        if (b.points !== a.points) return b.points - a.points;\n        const diffA = a.scored - a.against;\n        const diffB = b.scored - b.against;\n        if (diffB !== diffA) return diffB - diffA;\n        return b.scored - a.scored;\n      });\n\n      // Convert sorted teams back into an object with team names as keys\n      updatedStandings[poule] = teams.reduce((acc, team) => {\n        acc[team.name] = team;\n        return acc;\n      }, {});\n    });\n    return updatedStandings;\n  };\n  const debugStandings = results => {\n    console.log('Debug: Processing Results');\n    results.forEach(match => {\n      console.log(`Match: ${match.teams}`);\n      console.log(`Scores: ${match.score1}-${match.score2}`);\n      console.log(`Poule: ${match.poule}`);\n    });\n    const standings = updateStandings(results);\n    console.log('Debug: Final Standings', standings);\n    return standings;\n  };\n  const handleSaveResults = newResults => {\n    if (!Array.isArray(newResults)) {\n      console.error(\"Expected newResults to be an array\");\n      return;\n    }\n    const completeResults = newResults.filter(result => result.teams && result.score1 !== undefined && result.score2 !== undefined && result.poule);\n    if (completeResults.length > 0) {\n      // Debug: Log complete results to confirm data structure\n      console.log(\"Complete Results:\", completeResults);\n\n      // Update standings with the new complete results\n      const newStandings = updateStandings(completeResults);\n\n      // Debug: Log updated standings to verify population\n      console.log(\"Updated Standings:\", newStandings);\n      setResults(completeResults);\n      setStandings(newStandings);\n    } else {\n      console.warn(\"No complete match results to save\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Volleyball Tournament Configuration\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), !config ? /*#__PURE__*/_jsxDEV(ConfigurationForm, {\n      onSubmit: handleConfigSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: generatePouleSchedule,\n        children: \"Generate Schedule\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(PouleSchedule, {\n        schedule: schedule\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(MatchResults, {\n        matches: schedule,\n        onSaveResults: handleSaveResults\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(LiveStandings, {\n        standings: standings\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setKnockoutStage(true),\n        children: \"Save Results & Start Knockout Rounds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this), knockoutStage && /*#__PURE__*/_jsxDEV(KnockoutRounds, {\n        teams: knockoutTeams\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 196,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"4eUxLSdbMenZ8rgivkaQwqPq/+Y=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","ConfigurationForm","PouleSchedule","MatchResults","LiveStandings","KnockoutRounds","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","config","setConfig","schedule","setSchedule","results","setResults","standings","setStandings","knockoutStage","setKnockoutStage","knockoutTeams","setKnockoutTeams","handleConfigSubmit","newConfig","generatePouleSchedule","teamNames","numPoules","numCourts","matchTime","startTime","poules","Array","from","length","forEach","team","index","pouleIndex","push","addMinutes","time","minutes","hour","min","split","map","Number","newMinutes","newHour","Math","floor","newMin","String","padStart","currentTime","generatedSchedule","poule","i","j","nonPlayingTeams","filter","referee","teams","court","score1","score2","updateStandings","newResults","updatedStandings","match","team1","team2","t","trim","team1Score","parseInt","team2Score","name","played","won","points","scored","against","team1Stats","team2Stats","Object","keys","values","sort","a","b","diffA","diffB","reduce","acc","debugStandings","console","log","handleSaveResults","isArray","error","completeResults","result","undefined","newStandings","warn","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onClick","matches","onSaveResults","_c","$RefreshReg$"],"sources":["/app/src/App.js"],"sourcesContent":["// frontend/src/App.js\n\nimport React, { useState } from 'react';\nimport ConfigurationForm from './components/ConfigurationForm';\nimport PouleSchedule from './components/PouleSchedule';\nimport MatchResults from './components/MatchResults';\nimport LiveStandings from './components/LiveStandings';\nimport KnockoutRounds from './components/KnockoutRounds';\nimport './styles/index.css';\n\nconst App = () => {\n  const [config, setConfig] = useState(null);\n  const [schedule, setSchedule] = useState([]);\n  const [results, setResults] = useState({});\n  const [standings, setStandings] = useState({});\n  const [knockoutStage, setKnockoutStage] = useState(false);\n  const [knockoutTeams, setKnockoutTeams] = useState([]);\n\n  const handleConfigSubmit = (newConfig) => {\n    setConfig(newConfig);\n    setKnockoutStage(false);\n    setSchedule([]);\n    setResults([]);\n    setStandings({});\n  };\n\n  const generatePouleSchedule = () => {\n    const { teamNames, numPoules, numCourts, matchTime, startTime } = config;\n    const poules = Array.from({ length: numPoules }, () => []);\n\n    teamNames.forEach((team, index) => {\n      const pouleIndex = index % numPoules;\n      poules[pouleIndex].push(team);\n    });\n\n    const addMinutes = (time, minutes) => {\n      const [hour, min] = time.split(':').map(Number);\n      const newMinutes = hour * 60 + min + minutes;\n      const newHour = Math.floor(newMinutes / 60) % 24;\n      const newMin = newMinutes % 60;\n      return `${String(newHour).padStart(2, '0')}:${String(newMin).padStart(2, '0')}`;\n    };\n\n    let currentTime = startTime;\n    const generatedSchedule = [];\n    poules.forEach((poule, pouleIndex) => {\n      for (let i = 0; i < poule.length - 1; i++) {\n        for (let j = i + 1; j < poule.length; j++) {\n          const nonPlayingTeams = teamNames.filter(\n            (team) => team !== poule[i] && team !== poule[j]\n          );\n          const referee = nonPlayingTeams[(generatedSchedule.length) % nonPlayingTeams.length];\n\n          generatedSchedule.push({\n            time: currentTime,\n            teams: `${poule[i]} vs ${poule[j]}`,\n            poule: pouleIndex + 1,\n            court: (generatedSchedule.length % numCourts) + 1,\n            referee,\n            score1: 0,\n            score2: 0,\n          });\n\n          currentTime = addMinutes(currentTime, matchTime);\n        }\n      }\n    });\n    setSchedule(generatedSchedule);\n  };\n\nconst updateStandings = (newResults) => {\n  const updatedStandings = { ...standings };\n\n  newResults.forEach((match) => {\n    const { teams, score1, score2, poule } = match;\n\n    // Initialize poule if it doesn't exist in updatedStandings\n    if (!updatedStandings[poule]) {\n      updatedStandings[poule] = {};\n    }\n\n    // Split team names and parse scores\n    const [team1, team2] = teams.split(' vs ').map(t => t.trim());\n    const team1Score = parseInt(score1, 10);\n    const team2Score = parseInt(score2, 10);\n\n    // Initialize teams in standings if they don't already exist\n    [team1, team2].forEach(team => {\n      if (!updatedStandings[poule][team]) {\n        updatedStandings[poule][team] = {\n          name: team,\n          played: 0,\n          won: 0,\n          points: 0,\n          scored: 0,\n          against: 0\n        };\n      }\n    });\n\n    // Retrieve stats for each team\n    const team1Stats = updatedStandings[poule][team1];\n    const team2Stats = updatedStandings[poule][team2];\n\n    // Update games played\n    team1Stats.played++;\n    team2Stats.played++;\n\n    // Update scores\n    team1Stats.scored += team1Score;\n    team1Stats.against += team2Score;\n    team2Stats.scored += team2Score;\n    team2Stats.against += team1Score;\n\n    // Determine and update points based on match outcome\n    if (team1Score > team2Score) {\n      team1Stats.won++;\n      team1Stats.points += 3;\n    } else if (team2Score > team1Score) {\n      team2Stats.won++;\n      team2Stats.points += 3;\n    } else {\n      // In case of a draw, each team gets 1 point\n      team1Stats.points += 1;\n      team2Stats.points += 1;\n    }\n  });\n\n  // Sort teams within each poule based on points, goal difference, and goals scored\n  Object.keys(updatedStandings).forEach(poule => {\n    const teams = Object.values(updatedStandings[poule]);\n\n    teams.sort((a, b) => {\n      if (b.points !== a.points) return b.points - a.points;\n      const diffA = a.scored - a.against;\n      const diffB = b.scored - b.against;\n      if (diffB !== diffA) return diffB - diffA;\n      return b.scored - a.scored;\n    });\n\n    // Convert sorted teams back into an object with team names as keys\n    updatedStandings[poule] = teams.reduce((acc, team) => {\n      acc[team.name] = team;\n      return acc;\n    }, {});\n  });\n\n  return updatedStandings;\n};\n\n\n  const debugStandings = (results) => {\n    console.log('Debug: Processing Results');\n    results.forEach(match => {\n      console.log(`Match: ${match.teams}`);\n      console.log(`Scores: ${match.score1}-${match.score2}`);\n      console.log(`Poule: ${match.poule}`);\n    });\n\n    const standings = updateStandings(results);\n    console.log('Debug: Final Standings', standings);\n    return standings;\n  };\n\nconst handleSaveResults = (newResults) => {\n  if (!Array.isArray(newResults)) {\n    console.error(\"Expected newResults to be an array\");\n    return;\n  }\n\n  const completeResults = newResults.filter(result =>\n    result.teams &&\n    result.score1 !== undefined &&\n    result.score2 !== undefined &&\n    result.poule\n  );\n\n  if (completeResults.length > 0) {\n    // Debug: Log complete results to confirm data structure\n    console.log(\"Complete Results:\", completeResults);\n\n    // Update standings with the new complete results\n    const newStandings = updateStandings(completeResults);\n\n    // Debug: Log updated standings to verify population\n    console.log(\"Updated Standings:\", newStandings);\n\n    setResults(completeResults);\n    setStandings(newStandings);\n  } else {\n    console.warn(\"No complete match results to save\");\n  }\n};\n\n  return (\n    <div>\n      <h1>Volleyball Tournament Configuration</h1>\n      {!config ? (\n        <ConfigurationForm onSubmit={handleConfigSubmit} />\n      ) : (\n        <>\n          <button onClick={generatePouleSchedule}>Generate Schedule</button>\n          <PouleSchedule schedule={schedule} />\n          <MatchResults matches={schedule} onSaveResults={handleSaveResults} />\n          <LiveStandings standings={standings} />\n          <button onClick={() => setKnockoutStage(true)}>Save Results & Start Knockout Rounds</button>\n          {knockoutStage && <KnockoutRounds teams={knockoutTeams} />}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}